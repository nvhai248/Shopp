generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  UNDEFINED
}

enum Role {
  CUSTOMER
  ADMIN
}

enum StatusOrder {
  PENDING
  ON_SHPPING
  CANCEL
  DONE
}

enum StatusProduct {
  ACTIVED
  DELETED
  ON_SALE
  ON_PROMOTION
}

enum ProductType {
  FICTION
  NON_FICTION
  MYSTERY
  SCIENCE_FICTION
  FANTASY
  BIOGRAPHY
  HISTORY
  ROMANCE
  THRILLER
  CHILDREN
  YOUNG_ADULT
  SELF_HELP
  HEALTH
  COOKING
  ART
  POETRY
  TRAVEL
  RELIGION
  SCIENCE
  SPORTS
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String         @unique
  birthDate    DateTime?
  gender       Gender         @default(UNDEFINED)
  phoneNumber  String?
  password     String
  salt         String
  googleId     String?
  status       Int            @default(0)
  avatar       String?
  role         Role           @default(CUSTOMER)
  secretOtp    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  contacts     Contact[]
  RefreshToken RefreshToken[]
  Order        Order[]
  Review       Review[]
}

model RefreshToken {
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired      Int
  createdAt    DateTime @default(now())

  @@index([userId], name: "userId_index")
}

model Contact {
  id            Int      @id @default(autoincrement())
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  district      String
  province      String
  wards         String
  detailAddress String
  phoneNumber   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order[]

  @@index([userId], name: "contact_user_idx")
}

model Product {
  id           Int            @id @default(autoincrement())
  brandId      Int
  name         String
  price        Float
  priceSale    Float
  categoryId   Int
  category     Category       @relation(fields: [categoryId], references: [id])
  brand        Brand          @relation(fields: [brandId], references: [id])
  types        ProductType[]
  avatar       String?
  status       StatusProduct  @default(ACTIVED)
  cover        String[]
  createdBy    Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Review       Review[]
  productOrder productOrder[]

  @@index([brandId], name: "brand_product_index")
  @@index([categoryId], name: "category_product_index")
}

model Category {
  id          Int       @id @default(autoincrement())
  brandId     Int
  brand       Brand     @relation(fields: [brandId], references: [id])
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@index([brandId], name: "brand_category_index")
}

model Brand {
  id        Int        @id @default(autoincrement())
  name      String
  createdBy Int
  avatar    String
  status    Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  Product   Product[]
}

model productOrder {
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@id([orderId, productId])
}

model Order {
  id         Int            @id @default(autoincrement())
  ownerId    Int
  owner      User           @relation(fields: [ownerId], references: [id])
  products   productOrder[]
  contact    Contact        @relation(fields: [contactId], references: [id])
  totalPrice Int
  status     StatusOrder    @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  contactId  Int

  @@index([ownerId], name: "owner_order_index")
}

model Review {
  int       Int      @id @default(autoincrement())
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  content   String
  cover     String[]
  status    Int      @default(1)
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId], name: "owner_review_index")
  @@index([productId], name: "product_review_index")
}
