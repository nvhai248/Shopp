generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  ALL
}

enum OwnerType {
  USER
  STORE
}

enum Role {
  BUYER
  SELLER
  SHIPPER
  ADMIN
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  birthDate    DateTime?
  gender       Gender         @default(ALL)
  phoneNumber  String?
  password     String
  salt         String
  status       Int            @default(0)
  avatar       String?
  role         Role           @default(BUYER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  contacts     Contact[]
  Image        Image[]
  RefreshToken RefreshToken[]
}

model RefreshToken {
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired      Int
  createdAt    DateTime @default(now())
}

model Contact {
  id            Int       @id @default(autoincrement())
  user          User?     @relation(fields: [userId], references: [id])
  userId        Int?
  store         Store?    @relation(fields: [storeId], references: [id])
  storeId       Int?
  ownerType     OwnerType @default(USER)
  district      String
  province      String
  wards         String
  detailAddress String
  phoneNumber   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId], name: "contact_user_idx")
  @@index([storeId], name: "contact_store_idx")
}

model Product {
  id         Int      @id @default(autoincrement())
  storeId    Int
  name       String
  gender     Gender   @default(ALL)
  price      Float
  sale       Boolean  @default(false)
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  store      Store    @relation(fields: [storeId], references: [id])
  type       String
  avatar     String?
  cover      Image[]
  createdBy  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  storeId     Int
  store       Store     @relation(fields: [storeId], references: [id])
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Store {
  id        Int        @id @default(autoincrement())
  name      String
  createdBy Int
  avatar    String
  status    Int        @default(0)
  contacts  Contact[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  Product   Product[]
}

model Image {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  width     Int?
  height    Int?
  url       String
  cloudName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}
